// $containerWidth: значення задаємо;
@use "sass:math";
$containerWidth: 1270; //1240 + 30(padding)
// Мінімальна ширина сторінки
$minWidth: 320;
// Ширина полотна (макету)
$maxWidth: 1440;
// Ширина обмежуючого контейнера (0 = немає обмеження)
$maxWidthContainer: 1240;
// Загальний відступ у контейнера
// (30 = по 15px ліворуч і праворуч, 0 = немає відступу)
$containerPadding: 30;
// Ширина спрацьовування першого брейкпоінту
$containerWidth: $maxWidthContainer + $containerPadding;
// ------------------
//перетворення px в rem
@function toRem($valuePx, $valueFz: 16) {
  $convertValue: calc(($valuePx / $valueFz) * 1rem);
  @return $convertValue;
}

//перетворення px в em
@function toEm($valuePx, $valueFz: 16) {
  $convertValue: calc(($valuePx / $valueFz) * 1em);
  @return $convertValue;
}

// фунція для встановлення значення в заданих користувачем межах та в межах певної ширини екрану
@function rangeValue($givenValue, $minValue, $minWidth: 320, $maxWidth: $containerWidth) {
  $currentValue: clamp(
    toRem($minValue),
    calc(toRem($minValue) + ($givenValue - $minValue) * ((100vw - #{$minWidth}px) / ($maxWidth - $minWidth))),
    toRem($givenValue)
  );
  @return $currentValue;
}

// фунція для встановлення значення згідно макету та при ширині 320px, яке не матиме обмеження
@function adaptivInfinitiValua($givenValue, $minValue, $minWidth: 320, $maxWidth: $containerWidth) {
  $rezult: calc(
    toRem($minValue) + ($givenValue - $minValue) * ((100vw - #{$minWidth}px) / ($containerWidth - $minWidth))
  );
  @return $rezult;
}
//default 40px
//min 24px
//container width 1280
// font-size: calc(24px + (40 - 24) * ((100vw - 320px) / (1280 - 320)));

// ---------------------------------------------------------------------------------------------------------------------

// Адаптивна властивість (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поїнти в EM
  $widthFromMedia: toEm($widthFrom);
  $widthToMedia: toEm($widthTo);

  // Формула плаваючого значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // Отримання значення властивості
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
  // Якщо негативні значення
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }
  // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Якщо підтримується clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // Якщо не підтримується clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) -
          math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}
